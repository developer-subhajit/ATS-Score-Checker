name: Run Tests

on:
    pull_request:
        types: [opened, reopened, labeled, synchronize]
    push:
        branches: [main]
        paths:
            - "src/**"
            - "tests/**"
            - "requirements.txt"
            - ".github/workflows/**"

permissions:
    contents: read
    pull-requests: write

jobs:
    should-run-tests:
        runs-on: ubuntu-latest
        outputs:
            run-tests: ${{ steps.check.outputs.run-tests }}
        steps:
            - id: check
              run: |
                  if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
                      echo "run-tests=true" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "pull_request" && "${{ contains(github.event.pull_request.labels.*.name, 'ready-for-test') }}" == "true" ]]; then
                      echo "run-tests=true" >> $GITHUB_OUTPUT
                  else
                      echo "run-tests=false" >> $GITHUB_OUTPUT
                  fi

    test:
        needs: should-run-tests
        if: needs.should-run-tests.outputs.run-tests == 'true'
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest-cov pytest-xdist
                  python -m nltk.downloader -d ./nltk_data punkt stopwords wordnet averaged_perceptron_tagger

            - name: Create test directories
              run: |
                  mkdir -p tests/data/raw
                  mkdir -p tests/data/processed
                  mkdir -p tests/data/jobs
                  mkdir -p tests/data/results

            - name: Run tests with coverage
              env:
                  NLTK_DATA: ./nltk_data
              run: |
                  # First run preprocessing tests with detailed output
                  python -m pytest tests/test_preprocessing.py -v --tb=long || {
                      echo "Preprocessing tests failed. Full error output above."
                      exit 1
                  }

                  # Then run all tests with coverage
                  python -m pytest tests/ -v --color=yes --cov=src --cov-report=term-missing -n auto --dist loadfile

            - name: Upload test results
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results
                  path: |
                      .coverage
                      htmlcov
                  retention-days: 7

            - name: Cleanup coverage files
              if: always()
              run: |
                  echo "Starting cleanup of coverage files..."
                  echo "Removing .coverage file..."
                  rm -f .coverage
                  echo "Removing htmlcov directory..."
                  rm -rf htmlcov/
                  echo "Removing pytest cache..."
                  rm -rf .pytest_cache/
                  echo "Cleanup complete. Verifying..."
                  ls -la

    notify:
        needs: test
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Check test results
              if: ${{ needs.test.result != 'success' }}
              run: exit 1
